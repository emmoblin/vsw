//
// Copyright 2017 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package receiver

import (
	"bytes"
	"testing"

	"github.com/lagopus/vsw/agents/tunnel/ipsec/sad"
	"github.com/lagopus/vsw/modules/tunnel/ipsec"

	"github.com/stretchr/testify/suite"
)

type SadTestSuit struct {
	suite.Suite
}

func Test_SadTestSuite(t *testing.T) {
	suite.Run(t, new(SadTestSuit))
}

func (s *SadTestSuit) TesttoSadbSaSAV() {
	b := []byte{
		0x02, 0x00, 0x01, 0x00, 0xc8, 0xca, 0xc0, 0x29, 0x20, 0x01, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xc5, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1d, 0x7d, 0x80, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x05, 0x00, 0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x07, 0x00, 0xff, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0xa0, 0x00, 0x00, 0x00,
		0x82, 0x45, 0x2e, 0xb8, 0x73, 0x29, 0xe9, 0x11, 0x11, 0xf8, 0x2c, 0xba, 0x26, 0x86, 0x56, 0xf4,
		0xe1, 0x7a, 0xf6, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00, 0x80, 0x00, 0x00, 0x00,
		0x34, 0xf4, 0x6b, 0xf2, 0x07, 0x2d, 0x86, 0xb8, 0xf6, 0x74, 0xe8, 0x78, 0x57, 0xd2, 0x0e, 0xe6,
		0x02, 0x00, 0x13, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	}

	r := bytes.NewReader(b)
	smsg := sadbAddMsg{}
	err := smsg.Parse(r)

	s.Assert().NoError(err)
	s.Assert().NotNil(smsg)

	sav, ok := smsg.toSadbSaSAV()
	s.Assert().True(ok)
	s.Assert().NotNil(sav)
}

func (s *SadTestSuit) TesttoSadbSaSAVWithError() {
	smsg := sadbAddMsg{}

	sav, ok := smsg.toSadbSaSAV()
	s.Assert().False(ok)
	s.Assert().Nil(sav)
}

func (s *SadTestSuit) TesttoSadbGetMsgReply() {
	b := []byte{
		0x02, 0x00, 0x01, 0x00, 0xc8, 0xca, 0xc0, 0x29, 0x20, 0x01, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xc5, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1d, 0x7d, 0x80, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x05, 0x00, 0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x07, 0x00, 0xff, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0xa0, 0x00, 0x00, 0x00,
		0x82, 0x45, 0x2e, 0xb8, 0x73, 0x29, 0xe9, 0x11, 0x11, 0xf8, 0x2c, 0xba, 0x26, 0x86, 0x56, 0xf4,
		0xe1, 0x7a, 0xf6, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00, 0x80, 0x00, 0x00, 0x00,
		0x34, 0xf4, 0x6b, 0xf2, 0x07, 0x2d, 0x86, 0xb8, 0xf6, 0x74, 0xe8, 0x78, 0x57, 0xd2, 0x0e, 0xe6,
		0x02, 0x00, 0x13, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	}

	r := bytes.NewReader(b)
	smsg := sadbAddMsg{}
	err := smsg.Parse(r)

	s.Assert().NoError(err)
	s.Assert().NotNil(smsg)

	b = []byte{
		0x02, 0x00, 0x01, 0x00, 0xc8, 0xca, 0xc0, 0x29, 0x20, 0x01, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0d,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}

	r = bytes.NewReader(b)
	sgmsg := sadbGetMsg{}
	err = sgmsg.Parse(r)
	s.Assert().NotNil(sgmsg)
	s.Assert().NoError(err)

	sav, ok := smsg.toSadbSaSAV()
	s.Assert().True(ok)
	s.Assert().NotNil(sav)

	sreply, ok := sgmsg.toSadbGetMsgReply(sav, 2)
	s.Assert().True(ok)
	s.Assert().NotNil(sreply)
}

func (s *SadTestSuit) TestExpireMsg() {
	b := []byte{
		0x02, 0x00, 0x01, 0x00, 0xc8, 0xca, 0xc0, 0x29, 0x20, 0x01, 0x03, 0x0c, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x10, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xc5, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1d, 0x7d, 0x80, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x05, 0x00, 0x00, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0c,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x20, 0x00, 0x00,
		0x02, 0x00, 0x00, 0x00, 0xac, 0x10, 0x01, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x07, 0x00, 0xff, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0xa0, 0x00, 0x00, 0x00,
		0x82, 0x45, 0x2e, 0xb8, 0x73, 0x29, 0xe9, 0x11, 0x11, 0xf8, 0x2c, 0xba, 0x26, 0x86, 0x56, 0xf4,
		0xe1, 0x7a, 0xf6, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00, 0x80, 0x00, 0x00, 0x00,
		0x34, 0xf4, 0x6b, 0xf2, 0x07, 0x2d, 0x86, 0xb8, 0xf6, 0x74, 0xe8, 0x78, 0x57, 0xd2, 0x0e, 0xe6,
		0x02, 0x00, 0x13, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	}

	r := bytes.NewReader(b)
	smsg := sadbAddMsg{}
	err := smsg.Parse(r)

	s.Assert().NoError(err)
	s.Assert().NotNil(smsg)

	sav, ok := smsg.toSadbSaSAV()
	s.Assert().True(ok)
	s.Assert().NotNil(sav)

	semsg := &sadbExpireMsg{}
	semsg.expireMsg(sav, 1, true)

	ok = sadbExpire(0, ipsec.DirectionTypeIn, 1, sav, sad.SoftLifetimeExpired)
	s.Assert().True(ok)
}
